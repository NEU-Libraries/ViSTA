from transcription_model import TranscriptionModel
from transcription import Transcription
import google.generativeai as genai
import os


class GeminiTranscriptionModel(TranscriptionModel):
    def __init__(self, prompt_file_path):
        super().__init__(prompt_file_path)
        goog_key = os.environ.get("GOOG_KEY")
        genai.configure(api_key=goog_key)
        generation_config = genai.GenerationConfig(temperature=0)
        self.__model = genai.GenerativeModel("gemini-1.5-pro", generation_config=generation_config)

    def generate_transcription(self,image_file):
        """
        Generates transcription from image at self.file_path
        Inputs:
            - None
        Outputs:
            - returns a Transcription object from the response generated by the model
            - self.tokens is initialized with the number of tokens used in the request
        """
        response = self.__model.generate_content(contents=[self.prompt,image_file])
        transcription = Transcription(response.text)
        self.token_data = response.usage_metadata
        #['total_tokens':500,'prompt_tokens':400]
        return transcription

    def get_total_tokens(self):
        """
        Gets the total number of tokens used from the latest transcription request
        Inputs:
            - None
        Outputs:
            - Returns total number of tokens from self.token_data
            OR if self.token_data is None
            - Returns message indicating no transcription requests have been made yet
        """
        if self.token_data is None:
            return "No Transcription Requests have been made"
        else:
            return self.token_data.total_token_count

    def get_input_tokens(self):
        """
        Gets the number of prompt/input tokens used from the latest transcription request
        Inputs:
            - None
        Outputs:
            - Returns the input tokens from self.token_data
            OR if self.token_data is None
            - Returns message indicating no transcription requests have been made yet
        """
        if self.token_data is None:
            return "No Transcription Requests have been made"
        else:
            return self.token_data.prompt_token_count

    def get_output_tokens(self):
        if self.token_data is None:
            return "No Transcription Requests have been made"
        else:
            return self.token_data.candidates_token_count

